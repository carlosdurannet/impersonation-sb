/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.carlosduran.liferay.impersonation.sb.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import net.carlosduran.liferay.impersonation.sb.model.ImpersonationRegistry;
import net.carlosduran.liferay.impersonation.sb.model.ImpersonationRegistryModel;

/**
 * The base model implementation for the ImpersonationRegistry service. Represents a row in the &quot;cdnet_ImpersonationRegistry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ImpersonationRegistryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImpersonationRegistryImpl}.
 * </p>
 *
 * @author Carlos Dur√°n
 * @see ImpersonationRegistryImpl
 * @generated
 */
@ProviderType
public class ImpersonationRegistryModelImpl
	extends BaseModelImpl<ImpersonationRegistry>
	implements ImpersonationRegistryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a impersonation registry model instance should use the <code>ImpersonationRegistry</code> interface instead.
	 */
	public static final String TABLE_NAME = "cdnet_ImpersonationRegistry";

	public static final Object[][] TABLE_COLUMNS = {
		{"impersonationRegistryId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"screenName", Types.VARCHAR},
		{"impersonatedUserId", Types.BIGINT},
		{"impersonatedScreenName", Types.VARCHAR},
		{"operationDate", Types.TIMESTAMP}, {"operationResult", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("impersonationRegistryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("impersonatedUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("impersonatedScreenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("operationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("operationResult", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cdnet_ImpersonationRegistry (impersonationRegistryId LONG not null primary key,companyId LONG,userId LONG,screenName VARCHAR(75) null,impersonatedUserId LONG,impersonatedScreenName VARCHAR(75) null,operationDate DATE null,operationResult INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table cdnet_ImpersonationRegistry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY impersonationRegistry.operationDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cdnet_ImpersonationRegistry.operationDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		net.carlosduran.liferay.impersonation.sb.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.net.carlosduran.liferay.impersonation.sb.model.ImpersonationRegistry"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		net.carlosduran.liferay.impersonation.sb.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.net.carlosduran.liferay.impersonation.sb.model.ImpersonationRegistry"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		net.carlosduran.liferay.impersonation.sb.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.net.carlosduran.liferay.impersonation.sb.model.ImpersonationRegistry"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long OPERATIONDATE_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		net.carlosduran.liferay.impersonation.sb.service.util.ServiceProps.get(
			"lock.expiration.time.net.carlosduran.liferay.impersonation.sb.model.ImpersonationRegistry"));

	public ImpersonationRegistryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _impersonationRegistryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImpersonationRegistryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _impersonationRegistryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImpersonationRegistry.class;
	}

	@Override
	public String getModelClassName() {
		return ImpersonationRegistry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ImpersonationRegistry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ImpersonationRegistry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImpersonationRegistry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ImpersonationRegistry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ImpersonationRegistry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ImpersonationRegistry, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ImpersonationRegistry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ImpersonationRegistry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ImpersonationRegistry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ImpersonationRegistry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ImpersonationRegistry.class.getClassLoader(),
			ImpersonationRegistry.class, ModelWrapper.class);

		try {
			Constructor<ImpersonationRegistry> constructor =
				(Constructor<ImpersonationRegistry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ImpersonationRegistry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ImpersonationRegistry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ImpersonationRegistry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ImpersonationRegistry, Object>>();
		Map<String, BiConsumer<ImpersonationRegistry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ImpersonationRegistry, ?>>();

		attributeGetterFunctions.put(
			"impersonationRegistryId",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getImpersonationRegistryId();
				}

			});
		attributeSetterBiConsumers.put(
			"impersonationRegistryId",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object impersonationRegistryId) {

					impersonationRegistry.setImpersonationRegistryId(
						(Long)impersonationRegistryId);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object companyId) {

					impersonationRegistry.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object userId) {

					impersonationRegistry.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"screenName",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getScreenName();
				}

			});
		attributeSetterBiConsumers.put(
			"screenName",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object screenName) {

					impersonationRegistry.setScreenName((String)screenName);
				}

			});
		attributeGetterFunctions.put(
			"impersonatedUserId",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getImpersonatedUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"impersonatedUserId",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object impersonatedUserId) {

					impersonationRegistry.setImpersonatedUserId(
						(Long)impersonatedUserId);
				}

			});
		attributeGetterFunctions.put(
			"impersonatedScreenName",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getImpersonatedScreenName();
				}

			});
		attributeSetterBiConsumers.put(
			"impersonatedScreenName",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object impersonatedScreenName) {

					impersonationRegistry.setImpersonatedScreenName(
						(String)impersonatedScreenName);
				}

			});
		attributeGetterFunctions.put(
			"operationDate",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getOperationDate();
				}

			});
		attributeSetterBiConsumers.put(
			"operationDate",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object operationDate) {

					impersonationRegistry.setOperationDate((Date)operationDate);
				}

			});
		attributeGetterFunctions.put(
			"operationResult",
			new Function<ImpersonationRegistry, Object>() {

				@Override
				public Object apply(
					ImpersonationRegistry impersonationRegistry) {

					return impersonationRegistry.getOperationResult();
				}

			});
		attributeSetterBiConsumers.put(
			"operationResult",
			new BiConsumer<ImpersonationRegistry, Object>() {

				@Override
				public void accept(
					ImpersonationRegistry impersonationRegistry,
					Object operationResult) {

					impersonationRegistry.setOperationResult(
						(Integer)operationResult);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getImpersonationRegistryId() {
		return _impersonationRegistryId;
	}

	@Override
	public void setImpersonationRegistryId(long impersonationRegistryId) {
		_impersonationRegistryId = impersonationRegistryId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return "";
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	@Override
	public long getImpersonatedUserId() {
		return _impersonatedUserId;
	}

	@Override
	public void setImpersonatedUserId(long impersonatedUserId) {
		_impersonatedUserId = impersonatedUserId;
	}

	@Override
	public String getImpersonatedUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(
				getImpersonatedUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setImpersonatedUserUuid(String impersonatedUserUuid) {
	}

	@Override
	public String getImpersonatedScreenName() {
		if (_impersonatedScreenName == null) {
			return "";
		}
		else {
			return _impersonatedScreenName;
		}
	}

	@Override
	public void setImpersonatedScreenName(String impersonatedScreenName) {
		_impersonatedScreenName = impersonatedScreenName;
	}

	@Override
	public Date getOperationDate() {
		return _operationDate;
	}

	@Override
	public void setOperationDate(Date operationDate) {
		_columnBitmask = -1L;

		_operationDate = operationDate;
	}

	@Override
	public int getOperationResult() {
		return _operationResult;
	}

	@Override
	public void setOperationResult(int operationResult) {
		_operationResult = operationResult;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ImpersonationRegistry.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImpersonationRegistry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImpersonationRegistryImpl impersonationRegistryImpl =
			new ImpersonationRegistryImpl();

		impersonationRegistryImpl.setImpersonationRegistryId(
			getImpersonationRegistryId());
		impersonationRegistryImpl.setCompanyId(getCompanyId());
		impersonationRegistryImpl.setUserId(getUserId());
		impersonationRegistryImpl.setScreenName(getScreenName());
		impersonationRegistryImpl.setImpersonatedUserId(
			getImpersonatedUserId());
		impersonationRegistryImpl.setImpersonatedScreenName(
			getImpersonatedScreenName());
		impersonationRegistryImpl.setOperationDate(getOperationDate());
		impersonationRegistryImpl.setOperationResult(getOperationResult());

		impersonationRegistryImpl.resetOriginalValues();

		return impersonationRegistryImpl;
	}

	@Override
	public int compareTo(ImpersonationRegistry impersonationRegistry) {
		int value = 0;

		value = DateUtil.compareTo(
			getOperationDate(), impersonationRegistry.getOperationDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImpersonationRegistry)) {
			return false;
		}

		ImpersonationRegistry impersonationRegistry =
			(ImpersonationRegistry)obj;

		long primaryKey = impersonationRegistry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ImpersonationRegistryModelImpl impersonationRegistryModelImpl = this;

		impersonationRegistryModelImpl._originalCompanyId =
			impersonationRegistryModelImpl._companyId;

		impersonationRegistryModelImpl._setOriginalCompanyId = false;

		impersonationRegistryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImpersonationRegistry> toCacheModel() {
		ImpersonationRegistryCacheModel impersonationRegistryCacheModel =
			new ImpersonationRegistryCacheModel();

		impersonationRegistryCacheModel.impersonationRegistryId =
			getImpersonationRegistryId();

		impersonationRegistryCacheModel.companyId = getCompanyId();

		impersonationRegistryCacheModel.userId = getUserId();

		impersonationRegistryCacheModel.screenName = getScreenName();

		String screenName = impersonationRegistryCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			impersonationRegistryCacheModel.screenName = null;
		}

		impersonationRegistryCacheModel.impersonatedUserId =
			getImpersonatedUserId();

		impersonationRegistryCacheModel.impersonatedScreenName =
			getImpersonatedScreenName();

		String impersonatedScreenName =
			impersonationRegistryCacheModel.impersonatedScreenName;

		if ((impersonatedScreenName != null) &&
			(impersonatedScreenName.length() == 0)) {

			impersonationRegistryCacheModel.impersonatedScreenName = null;
		}

		Date operationDate = getOperationDate();

		if (operationDate != null) {
			impersonationRegistryCacheModel.operationDate =
				operationDate.getTime();
		}
		else {
			impersonationRegistryCacheModel.operationDate = Long.MIN_VALUE;
		}

		impersonationRegistryCacheModel.operationResult = getOperationResult();

		return impersonationRegistryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ImpersonationRegistry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ImpersonationRegistry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImpersonationRegistry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((ImpersonationRegistry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ImpersonationRegistry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ImpersonationRegistry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImpersonationRegistry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((ImpersonationRegistry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ImpersonationRegistry>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _impersonationRegistryId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _screenName;
	private long _impersonatedUserId;
	private String _impersonatedScreenName;
	private Date _operationDate;
	private int _operationResult;
	private long _columnBitmask;
	private ImpersonationRegistry _escapedModel;

}